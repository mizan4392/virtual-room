// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  imageUri  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id         Int      @id @default(autoincrement())
  name       String
  imageUrl   String
  inviteCode String   @unique
  profileId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GEST
}

model Member {
  id Int @id @default(autoincrement())

  role      MemberRole
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  Int
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationId Int?
  Conversation   Conversation[]

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived  Conversation[] @relation("MemberTwo")

  @@index([profileId, serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        Int         @id @default(autoincrement())
  name      String
  type      ChannelType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  messages Message[]

  @@index([serverId, profileId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  fileUrl   String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([memberId, channelId])
}

model DirectMessage {
  id        Int      @id @default(autoincrement())
  content   String
  fileUrl   String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([memberId, conversationId])
}

model Conversation {
  id        Int      @id @default(autoincrement())
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberOneId Int
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId Int
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  messages DirectMessage[]
  Member   Member?         @relation(fields: [memberId], references: [id])
  memberId Int?

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId, memberTwoId])
}
